头文件名称为：EC4A_tc.h
#ifndef EC4A_TC_H
#define EC4A_TC_H
#define  EC4A_SYSTEM_ERROR          0x45430100
#define  EC4A_PARAMETER_ERROR       0x45430101
#define  EC4A_ILLEGAL_CALL_ERROR    0x45430102
#define  EC4A_RETRY_ERROR    0x45430103
#define EC4A_IMAGE_ID_LEN           MAX_IMAGE_ID
#define EC4A_MAX_IMAGES_NR          MAX_IMG_NR_PER_LOT
#define EC4A_MAX_EXPOSURES_NR       MAX_FLD_NR_PER_IMG
#define EC4A_MAX_RETICLE_ID         MAX_RETICLE_ID
#define EC4A_MAX_FILE_NAME_SIZE     0x80
#define EC4A_MAX_ALIGN_MARK         MAX_WAFER_MARK_NUM
#define EC4A_MAX_NR_ZONES           9
#define EC4A_MAX_MARK_NR_PER_ZONE     12
#define EC4A_MAX_EXPOSURE_NR_PER_ZONE     12
#define EC4A_NR_GRID_COEFS          10
#define EC4A_MAX_MSG_SIZE  0x200
#define EC4A_RETICLE_MARKS_NUM 2
#define EC4A_MAX_UPDATE_BASELINE_NUM 3
typedef enum
{
EC4A_LEVEL_MODE_MIN = 0
EC4A_LEVEL_MODE_GLOBAL
EC4A_LEVEL_MODE_GLOBAL_FLS
EC4A_LEVEL_MODE_FLS
EC4A_LEVEL_MODE_MAPPING
EC4A_LEVEL_MODE_SIMPLE_MAPPING
EC4A_LEVEL_MODE_MAX
} EC4A_LEVEL_MODE_ENUM
typedef enum
{
EC4A_CALC_ROUTE_OPT_MIN = 0
EC4A_CALC_ROUTE_OPT_CUSTOM
EC4A_CALC_ROUTE_OPT_STANDARD
EC4A_CALC_ROUTE_OPT_OPTIMIZE
EC4A_CALC_ROUTE_OPT_MAX
} EC4A_CALC_ROUTE_OPT_ENUM
typedef enum
{
EC4A_FIWA_REQ_MIN = 0
EC4A_FIWA_REQ_PRECISION_PREFERED
EC4A_FIWA_REQ_ROBUST_PREFERED
EC4A_FIWA_REQ_BALANCED
EC4A_FIWA_REQ_USER_DEFINE
EC4A_FIWA_REQ_MAX
} EC4A_FINE_SUBSTRATE_ALIGN_REQ_ENUM
typedef enum
{
EC4A_WA_METHOD_MIN = 0
EC4A_WA_METHOD_GLOBAL
EC4A_WA_METHOD_HYBRID
EC4A_WA_METHOD_MAX
} EC4A_WA_METHOD_ENUM
typedef enum
{
EC4A_ALIGNMENT_PHASE_MIN = 0
EC4A_COARSE_AND_FINE_PHASE
EC4A_COARSE_PHASE
EC4A_FINE_PHASE
} EC4A_ALIGNMENT_PHASE_ENUM
typedef enum
{
EC4A_AFBT_MIN = 0
EC4A_AFBT_ABORT_LOT
EC4A_AFBT_REJECT_WAFER
EC4A_AFBT_MANUAL_ALIGN
EC4A_AFBT_RETRY
EC4A_AFBT_MAX
}EC4A_ALIGN_FAILE_LOT_TREAT_ENUM
typedef enum
{
EC4A_ST_STATUS_MIN = 0
EC4A_ST_STATUS_IDLE
EC4A_ST_STATUS_TERMINATE
EC4A_ST_STATUS_START_LOT
EC4A_ST_STATUS_START_SUBSTRATE
EC4A_ST_STATUS_MAX
} EC4A_ST_STATUS_ENUM
typedef enum
{
EC4A_OA_CCD_MIN = 0
EC4A_OA_CCD_FRONT
EC4A_OA_CCD_BACK
EC4A_OA_CCD_MAX
} EC4A_OA_CCD_ENUM
typedef enum
{
EC4A_FIELD_STATE_MIN = 0
EC4A_FIELD_NONE
EC4A_FIELD_EXPOSED
EC4A_FIELD_FAILED
EC4A_FIELD_STATE_MAX
}EC4A_FIELD_STATE_ENUM
typedef enum
{
EC4A_IMAGE_STATE_MIN = 0
EC4A_IMAGE_NONE
EC4A_IMAGE_FULL
EC4A_IMAGE_FAILED
EC4A_IMAGE_STATE_MAX
}EC4A_IMAGE_STATE_ENUM
typedef enum
{
EC4A_FILTER_MODE_MIN = 0
EC4A_FILTER_MODE_GHI
EC4A_FILTER_MODE_GH
EC4A_FILTER_MODE_I
EC4A_FILTER_MODE_MAX
}EC4A_FILTER_MODE_ENUM
typedef enum
{
EC4A_DOSE_CONTROL_MODE_MIN = 0
EC4A_DOSE_CONTROL_BY_TIME
EC4A_DOSE_CONTROL_BY_ENERGY
EC4A_DOSE_CONTROL_MODE_MAX
}EC4A_DOSE_CONTROL_MODE_ENUM
typedef enum
{
EC4A_FINE_WAFER_ALIGN_MODE_MIN = 0
EC4A_FINE_BASIC_MODE
EC4A_FINE_ENHANCE_MODE
EC4A_FINE_WAFER_ALIGN_MODE_MAX
}EC4A_FINE_WAFER_ALIGN_MODE_ENUM
typedef enum
{
EC4A_MARK_PREF_MIN = 0
EC4A_MARK_PREF_PREFERED
EC4A_MARK_PREF_BACKUP
EC4A_MARK_PREF_MAX
} EC4A_MARK_PREF_ENUM
typedef enum
{
EC4A_CHCK_WS_CHUCK_PARTICLE_MIN = 0
EC4A_NO_CHECK
EC4A_CHECK
EC4A_FORCE_CHECK
EC4A_CHCK_WS_CHUCK_PARTICLE_MAX
} EC4A_CHECK_WS_CHUCK_PARTICLE_ENUM
typedef struct
{
EC4A_ST_STATUS_ENUM status
SMEE_INT32 filler1
} EC4A_STATUS_STRUCT
typedef struct
{
SMEE_BOOL do_auto_focus
SMEE_BOOL perform_vert_compensation
SMEE_DOUBLE vert_compensation
SMEE_BOOL specify_algorithm
SMEE_ALGORITHM_TYPE_ENUM algorithm_type
SMEE_BOOL use_align_alg_param
SMEE_INT32 filler
SMEE_CHAR align_alg_param_file_name[SMEE_MAX_FILE_NAME_SIZE]
SMEE_DOUBLE matching_rate
SMEE_CHAR template_file[EC4A_MAX_FILE_NAME_SIZE]
} EC4A_ALIGN_RECIPE_STRUCT
typedef struct
{
SMEE_INT32 mark_id
SMEE_INT32 zone_id
EC4A_ALIGNMENT_PHASE_ENUM   mark_align_usage
EC4A_MARK_PREF_ENUM preference
xy_vect mark_position
} EC4A_SUBSTRATE_MARK_DATA_STRUCT
typedef struct
{
xy_vect RM1
xy_vect RM2
}EC4A_RETICLE_MARK_DATA_STRUCT
typedef struct
{
xy_vect translation
SMEE_DOUBLE rotation
SMEE_DOUBLE magnification
SMEE_DOUBLE asy_rotation
SMEE_DOUBLE asy_magn
} EC4A_INTERFIELD_CORR_STRUCT
typedef struct
{
SMEE_ALIGN_TYPE_ENUM  WA_CCD_type
EC4A_OA_CCD_ENUM OA_CCD
SMEE_BOOL is_matching_overlay
SMEE_INT32 nr_of_valid_fWA_marks
EC4A_ALIGN_FAILE_LOT_TREAT_ENUM  align_fail_lot_treat
SMEE_BOOL is_force_mark_training
SMEE_BOOL is_do_manual_align
EC4A_FINE_SUBSTRATE_ALIGN_REQ_ENUM fWA_requirement
SMEE_INT32 nr_wafer_marks
SMEE_BOOL perform_precise_wafer_alignment
EC4A_FINE_WAFER_ALIGN_MODE_ENUM fine_wafer_alignment
SMEE_BOOL adjust_mvs_brightness
SMEE_DOUBLE mvs_brightness
EC4A_SUBSTRATE_MARK_DATA_STRUCT wafer_marks[MAX_WAFER_MARK_NUM]
EC4A_ALIGN_RECIPE_STRUCT coarse_mark_recipe
EC4A_ALIGN_RECIPE_STRUCT fine_mark_recipe
EC4A_INTERFIELD_CORR_STRUCT layer_correction
} EC4A_ALIGN_STRATEGY_STRUCT
typedef struct
{
SMEE_BOOL filter_enable
SMEE_BOOL ina_enable
SMEE_BOOL pna_enable
EC4A_FILTER_MODE_ENUM filter_mode
SMEE_DOUBLE ina_value
SMEE_DOUBLE pna_value
}EC4A_ILLUMINATION_MODE_STRUCT
typedef struct
{
SMEE_INT32 exposure_id
SMEE_INT32 zone_id
SMEE_DOUBLE dose
zrxry_vect focus_offset
xy_vect field_position
} EC4A_EXPOSURE_DATA_STRUCT
typedef struct
{
SMEE_INT32   nr_of_marks
SMEE_INT32   filler
SMEE_UINT32   mark_id[EC4A_MAX_ALIGN_MARK]
}EC4A_MARK_INDEX_STRUCT
typedef struct
{
SMEE_INT32 zone_id
SMEE_INT32 filler
xy_vect zone_center
xy_vect zone_size
EC4A_MARK_INDEX_STRUCT zone_marks
} EC4A_ZONE_ALIGN_STRUCT
typedef struct
{
SMEE_CHAR image_id[EC4A_IMAGE_ID_LEN]
SMEE_CHAR reticle_id[EC4A_MAX_RETICLE_ID]
xy_vect image_center
xy_vect image_size
xy_vect image_shift
SMEE_BOOL specify_mask_win
SMEE_INT32 filler
xy_vect win_size
xy_vect win_center
SMEE_DOUBLE reticle_trans_factor
xyrz_vect reticle_pre_align_offset
EC4A_RETICLE_MARK_DATA_STRUCT reticle_marks
EC4A_CALC_ROUTE_OPT_ENUM calc_option
EC4A_DOSE_CONTROL_MODE_ENUM dose_mode
SMEE_UINT32 nr_zones
SMEE_INT32 nr_of_exposures
EC4A_ZONE_ALIGN_STRUCT zones[EC4A_MAX_NR_ZONES]
EC4A_EXPOSURE_DATA_STRUCT exposure[EC4A_MAX_EXPOSURES_NR]
} EC4A_IMAGE_DATA_STRUCT
typedef struct
{
SMEE_INT32 lot_id
SMEE_BOOL alignment_optimize
SMEE_BOOL global_level_optimize
EC4A_CHECK_WS_CHUCK_PARTICLE_ENUM check_WS_chuck_particle
SMEE_DOUBLE global_lvl_base_angle
EC4A_ILLUMINATION_MODE_STRUCT ill_mode
SMEE_DOUBLE substrate_reflect_factor
xyrz_vect substrate_load_offset
SMEE_DOUBLE focus_edge_clearance
SMEE_DOUBLE substrate_thickness
SMEE_DOUBLE glc_UserFocusOffset
SMEE_BOOL perform_exposure
EC4A_WA_METHOD_ENUM substrate_align_method
SMEE_SUBSTRATE_SIZE_ENUM substrate_size
SMEE_BOOL is_CGC
SMEE_CHAR CGC_model[SMEE_MAX_FILE_NAME_SIZE]
EC4A_ALIGN_STRATEGY_STRUCT strategy
SMEE_DOUBLE wafer_TPV
SMEE_DOUBLE wafer_LPV
EC4A_LEVEL_MODE_ENUM level_mode
SMEE_INT32 nr_of_images
EC4A_IMAGE_DATA_STRUCT image[EC4A_MAX_IMAGES_NR]
} EC4A_LOT_DATA_STRUCT
typedef struct
{
xy_vect mark_pos
xyrzzrxry_vect exp_pos
SMEE_BOOL align_valid
SMEE_BOOL is_searched
xyrz_vect measure_pos
xy_vect wafer_aim_pos
xy_vect  mark_pos_in_CCD
xy_vect align_dev
SMEE_DOUBLE match_rate
}EC4A_MARK_MEASURE_RESULT_STRUCT
typedef struct
{
SMEE_INT32 nr_of_marks
SMEE_BOOL result_valid
EC4A_MARK_MEASURE_RESULT_STRUCT mark_data[EC4A_MAX_ALIGN_MARK]
}EC4A_MARK_CLUSTER_MEASURE_RESULT_STRUCT
typedef struct
{
SMEE_BOOL pos_valid
SMEE_INT32 filler
xy_vect mark_pos
xyrz_vect RS_exp_pos
xyrz_vect WS_exp_pos
xy_vect mark_in_CCD
xy_vect align_dev_in_WZCS
SMEE_DOUBLE match_rate
}EC4A_RET_DATA_STRUCT
typedef struct
{
EC4A_RET_DATA_STRUCT  reti_coarse_align_data[EC4A_RETICLE_MARKS_NUM]
EC4A_RET_DATA_STRUCT  reti_fine_align_data[EC4A_RETICLE_MARKS_NUM]
}EC4A_RETICLE_MEASURE_DATA_STRUCT
typedef struct
{
EC4A_MARK_CLUSTER_MEASURE_RESULT_STRUCT coarse_align_data
EC4A_MARK_CLUSTER_MEASURE_RESULT_STRUCT fine_align_data
}EC4A_SUBSTRATE_ALIGN_MEASURE_RESULT_STRUCT
typedef struct
{
SMEE_INT32 substrate_index
SMEE_BOOL is_mapping
SMEE_BOOL glc_result_validate
SMEE_BOOL mapping_validate
ADAE_timestamp level_point_stable
ADAE_timestamp global_level_end
ADAE_timestamp mapping_start
ADAE_timestamp mapping_end
zrxry_vect global_level_result
SMEE_DOUBLE current_TPV
SMEE_DOUBLE current_LPV
SMEE_BOOL find_bad_area
SMEE_BOOL valid_wafer
}EC4A_SUBSTRATE_LOG_STRUCT
typedef struct
{
xy_vect rcs_to_rscs_trans
SMEE_DOUBLE rcs_to_rscs_rot
SMEE_DOUBLE rcs_to_rscs_mag
} EC4A_COARSE_RETICLE_ALIGN_RESULT_STRUCT
typedef struct
{
xy_vect rcs_to_wzcs_trans
SMEE_DOUBLE rcs_to_wzcs_rot
SMEE_DOUBLE rcs_to_wzcs_mag
} EC4A_FINE_RETICLE_ALIGN_RESULT_STRUCT
typedef struct
{
xy_vect wcs_to_wscs_trans
SMEE_DOUBLE wcs_to_wscs_rot
SMEE_DOUBLE wcs_to_wscs_othro
SMEE_DOUBLE wcs_to_wscs_mag_x
SMEE_DOUBLE wcs_to_wscs_mag_y
SMEE_DOUBLE grid_coef_x[EC4A_NR_GRID_COEFS]
SMEE_DOUBLE grid_coef_y[EC4A_NR_GRID_COEFS]
} EC4A_ALIGN_MODEL_RESULT_STRUCT
typedef struct
{
SMEE_INT32 nr_zones
SMEE_INT32 filler
EC4A_ALIGN_MODEL_RESULT_STRUCT zone_align_results[EC4A_MAX_NR_ZONES]
} EC4A_ZONE_ALIGN_RESULT_STRUCT
typedef struct
{
SMEE_ALIGN_TYPE_ENUM align_type
xy_vect FM_pos
xy_vect ref_pos
xyrz_vect rs_exp_pos
xyrzzrxry_vect ws_exp_pos
xy_vect aim_pos
SMEE_DOUBLE match_rate
}EC4A_FM_DATA_STRUCT
typedef struct
{
EC4A_FM_DATA_STRUCT  ttl_FM_data
EC4A_FM_DATA_STRUCT  wfr_align_data[EC4A_MAX_UPDATE_BASELINE_NUM]
}EC4A_FM_MEASURE_DATA_STRUCT
typedef struct
{
SMEE_CHAR image_id[MAX_IMAGE_ID]
SMEE_INT32 nr_exposed_success
SMEE_INT32 nr_exposed_failed
EC4A_IMAGE_STATE_ENUM image_state
SMEE_BOOL is_reject
SMEE_BOOL cora_model_validate
SMEE_BOOL fira_model_validate
SMEE_BOOL hapa_model_validate
SMEE_BOOL cowa_model_validate
SMEE_BOOL fiwa_model_validate
SMEE_INT32 is_retry
SMEE_DOUBLE rot_retry
EC4A_COARSE_RETICLE_ALIGN_RESULT_STRUCT CORA_result
EC4A_FINE_RETICLE_ALIGN_RESULT_STRUCT FIRA_result
EC4A_ALIGN_MODEL_RESULT_STRUCT COWA_result
EC4A_ZONE_ALIGN_RESULT_STRUCT FIWA_result
EC4A_SUBSTRATE_ALIGN_MEASURE_RESULT_STRUCT alignment_data
EC4A_RETICLE_MEASURE_DATA_STRUCT reticle_alignment_data
EC4A_FM_MEASURE_DATA_STRUCT fm_alignment_data
ADAE_timestamp image_begin
ADAE_timestamp wafer_coarse_alignment_begin_time
ADAE_timestamp wafer_coarse_alignment_end_time
ADAE_timestamp wafer_fine_alignment_begin_time
ADAE_timestamp wafer_fine_alignment_end_time
ADAE_timestamp reticle_coarse_align_start_time
ADAE_timestamp reticle_coarse_align_end_time
ADAE_timestamp reticle_fine_align_start_time
ADAE_timestamp reticle_fine_align_end_time
}EC4A_IMAGE_LOG_STRUCT
typedef struct
{
SMEE_CHAR image_id[MAX_IMAGE_ID]
SMEE_INT32 origin_index
EC4A_FIELD_STATE_ENUM field_state
xy_vect field_position
EC4A_DOSE_CONTROL_MODE_ENUM dose_mode
SMEE_INT32 field_index
xyrz_vect exp_ws_hor_pos
zrxry_vect exp_ws_ver_pos
xyrz_vect act_ws_hor_pos
zrxry_vect act_ws_ver_pos
SMEE_DOUBLE exp_dose
SMEE_DOUBLE real_exp_dose
SMEE_DOUBLE real_exp_time
ADAE_timestamp hor_move_begin
ADAE_timestamp hor_move_end
ADAE_timestamp vert_move_begin
ADAE_timestamp vert_move_end
ADAE_timestamp expose_begin
ADAE_timestamp expose_end
SMEE_BOOL bZinvalid
SMEE_BOOL bRXinvalid
SMEE_BOOL bRYinvalid
SMEE_BOOL filler1
zrxry_vect sfocus
} EC4A_FIELD_LOG_STRUCT
typedef struct
{
SMEE_CHAR image_id[EC4A_IMAGE_ID_LEN]
SMEE_INT32 expo_nr
SMEE_INT32 filler
xy_vect exp_center[MAX_FLD_NR_PER_IMG]
}EC4A_EXPO_INFO_STRUCT
typedef struct
{
SMEE_CHAR reticle_id[EC4A_MAX_RETICLE_ID]
SMEE_INT32 nr_of_images
SMEE_INT32 zfiller
EC4A_EXPO_INFO_STRUCT expo_info[EC4A_MAX_IMAGES_NR]
}EC4A_IMAGE_ROUTE_STRUCT
typedef struct
{
SMEE_CHAR message[EC4A_MAX_MSG_SIZE]
}EC4A_UI_MESSAGE_EVENT_STRUCT
typedef struct
{
EC4A_DOSE_CONTROL_MODE_ENUM dose_mode
SMEE_INT32 field_index
SMEE_DOUBLE dose
xy_vect field_position
zrxry_vect vert_position
} EC4A_EXPOSURE_BEGIN_STRUCT
typedef struct
{
xy_vect field_position
} EC4A_EXPOSURE_END_STRUCT
typedef struct
{
SMEE_BOOL update_loading_offset
SMEE_BOOL update_vert_compensation
SMEE_BOOL update_mvs_voltage
SMEE_INT32 filler
xyrz_vect loading_offset
SMEE_DOUBLE vert_compensation
SMEE_DOUBLE mvs_voltage
}EC4A_SAVE_ALIGNMENT_OFFSET_EVENT_STRUCT
typedef struct
{
SMEE_INT32 nr_marks
SMEE_INT32 filler
SMEE_DOUBLE coarse_matching_rate
SMEE_DOUBLE fine_matching_rate
EC4A_SUBSTRATE_MARK_DATA_STRUCT wafer_marks[MAX_WAFER_MARK_NUM]
}EC4A_WAFER_AILGN_BEGIN_STRUCT
头文件名称为：ADAE.h
#ifndef __ADAE_H__
#define __ADAE_H__
typedef		SMEE_INT32              ADAE_INT32
typedef		SMEE_INT64              ADAE_INT64
typedef		SMEE_FLOAT              ADAE_DOUBLE32
typedef		SMEE_DOUBLE             ADAE_DOUBLE64
typedef		SMEE_UINT16             ADAE_UINT16
typedef		SMEE_UINT32             ADAE_UINT32
typedef		SMEE_UINT8              ADAE_BYTE
typedef		SMEE_LPVOID             ADAE_PVOID
typedef		SMEE_UINT32             ADAE_SIZE
typedef		SMEE_INT32              ADAE_KEY
typedef		SMEE_INT32              ADAE_GID
typedef		SMEE_INT32              ADAE_MODE
typedef		unsigned long           ADAE_ULONG32
typedef		char*                   ADAE_STRING
typedef		long                    ADAE_LONG
typedef		ADAE_LONG               ADAE_OFF
typedef		ADAE_LONG               ADAE_TIME_T
#if     TARGET_OS == WIN_OS
typedef ADAE_ULONG32           ADAE_TIMER_ID
typedef ADAE_PVOID             ADAE_HANDLE
typedef ADAE_HANDLE            ADAE_TID
typedef ADAE_INT32             ADAE_FD
typedef ADAE_UINT32            ADAE_SOCKET
typedef ADAE_ULONG32           ADAE_PID
typedef ADAE_HANDLE            ADAE_SEM_ID
#elif   TARGET_OS == SUN_OS
typedef ADAE_INT32             ADAE_TIMER_ID
typedef ADAE_UINT32            ADAE_TID
typedef ADAE_INT32             ADAE_HANDLE
typedef ADAE_INT32             ADAE_FD
typedef ADAE_INT32             ADAE_SOCKET
typedef ADAE_INT32             ADAE_PID
typedef ADAE_INT32             ADAE_SEM_ID
#elif   TARGET_OS == VXWORKS_OS
typedef ADAE_PVOID             ADAE_TIMER_ID
typedef ADAE_UINT32            ADAE_TID
typedef ADAE_INT32             ADAE_HANDLE
typedef ADAE_INT32             ADAE_FD
typedef ADAE_INT32             ADAE_SOCKET
typedef ADAE_INT32             ADAE_PID
typedef ADAE_PVOID             ADAE_SEM_ID
#elif   TARGET_OS == LINUX_OS
typedef ADAE_PVOID             ADAE_TIMER_ID
typedef ADAE_ULONG32           ADAE_TID
typedef ADAE_INT32             ADAE_HANDLE
typedef ADAE_INT32             ADAE_FD
typedef ADAE_INT32             ADAE_SOCKET
typedef ADAE_INT32             ADAE_PID
typedef ADAE_INT32             ADAE_SEM_ID
#if     TARGET_OS == WIN_OS
#define ADAE_INVALID_PID        (NULL)
#define ADAE_INVALID_SEM_ID     (ADAE_SEM_ID)(0)
#define ADAE_INVALID_SHM_ID     (NULL)
#define ADAE_INVALLD_TID        (NULL)
#define ADAE_INVALID_SOCKET     (ADAE_UINT32)(~0)
#define ADAE_INVALID_TIMER_ID   (ADAE_UINT32)(~0)       
#define ADAE_INVALID_FD         (NULL)
#define ADAE_MAX_FILENAME_SIZE  (256)
#elif   TARGET_OS == SUN_OS
#define ADAE_INVALID_PID        (-1)
#define ADAE_INVALID_SEM_ID     (-1)
#define ADAE_INVALID_SHM_ID     (-1)
#define ADAE_INVALLD_TID        (ADAE_UINT32)(~0)
#define ADAE_INVALID_SOCKET     (int)(-1)
#define ADAE_INVALID_TIMER_ID   (-1)
#define ADAE_INVALID_FD         (-1)
#elif	TARGET_OS == VXWORKS_OS
#define ADAE_INVALID_PID        (-1)
#define ADAE_INVALID_SEM_ID     (ADAE_SEM_ID)(0)
#define ADAE_INVALID_SHM_ID     (-1)
#define ADAE_INVALLD_TID        (ADAE_UINT32)(~0)
#define ADAE_INVALID_SOCKET     (int)(-1)
#define ADAE_INVALID_TIMER_ID   (NULL)
#define ADAE_INVALID_FD         (-1)
#elif	TARGET_OS == LINUX_OS
#define ADAE_INVALID_PID        (-1)
#define ADAE_INVALID_SEM_ID     (-1)
#define ADAE_INVALID_SHM_ID     (-1)
#define ADAE_INVALLD_TID        (ADAE_UINT32)(~0)
#define ADAE_INVALID_SOCKET     (int)(-1)
#define ADAE_INVALID_TIMER_ID   (NULL)
#define ADAE_INVALID_FD         (-1)
typedef struct {
ADAE_LONG tm_sec
ADAE_LONG tm_usec
} ADAE_TIME_VALUE
typedef ADAE_TIME_VALUE ADAE_timestamp
#define ADAE_RD				(0x00)
#define ADAE_WR				(0x01)
#define ADAE_RDWR			(0x02)
#define ADAE_CREATE			(0x100)
#define ADAE_APPEND			(0x08)
#define ADAE_R_OK			(04)
#define ADAE_W_OK			(02)
#define ADAE_X_OK			(01)
#define ADAE_F_OK			(00)
SMEE_EXPORT void ADAE_debug(const char* format_msg,...)
SMEE_EXPORT void ADAE_logging(int iErcode
const char* format_msg,...)
头文件名称为：smee.h
#ifndef SMEE_H_
#define SMEE_H_
#ifndef IN
#define IN
#ifndef OUT
#define OUT
#ifndef INOUT
#define INOUT
#ifndef OK
#define OK              0
#ifndef NULL
#define NULL        0
#if TARGET_OS == SUN32_OS || TARGET_OS == VXWORKS32_OS || TARGET_OS == SUN64_OS || TARGET_OS == VXWORKS64_OS || TARGET_OS == LINUX32_OS || TARGET_OS == LINUX64_OS
#ifdef __cplusplus
#define __SMEE_FUNC__  (char*)__PRETTY_FUNCTION__
#else
#define __SMEE_FUNC__  (char*)__func__
#elif TARGET_OS == WIN32_OS || TARGET_OS == WIN64_OS
#define __SMEE_FUNC__  __FUNCTION__
#if TARGET_OS == SUN32_OS || TARGET_OS == VXWORKS32_OS || TARGET_OS == SUN64_OS || TARGET_OS == VXWORKS64_OS || TARGET_OS == LINUX32_OS || TARGET_OS == LINUX64_OS
#ifdef  __cplusplus
#define SMEE_EXPORT extern "C"
#else
#define SMEE_EXPORT extern
#define SMEE_VAR_EXPORT
#elif TARGET_OS == WIN32_OS || TARGET_OS == WIN64_OS
#ifdef __cplusplus
#define SMEE_EXPORT extern "C" __declspec ( dllexport )
#define SMEE_IMPORT extern "C" __declspec ( dllimport )
#else
#define SMEE_EXPORT extern __declspec ( dllexport )
#define SMEE_IMPORT extern __declspec ( dllimport )
#define SMEE_VAR_EXPORT __declspec ( dllexport )
头文件名称为：smee_station.h
#ifndef SMEE_STATION_H_
#define SMEE_STATION_H_
#define SMEE_SPARCB     0
#define SMEE_PPC        1
#define SMEE_X86_32     2
#define SMEE_SPARCB_64  3
#define SMEE_PPC_64     4
#define SMEE_X86_64     5
#define SMEE_SPARCB_32  SMEE_SPARCB
#define SMEE_PPC_32     SMEE_PPC
#ifndef TARGET_MACHINE
#define TARGET_MACHINE  SMEE_SPARCB_32
#define SUN32_OS        0
#define VXWORKS32_OS    1
#define WIN32_OS        2
#define SUN64_OS        3
#define VXWORKS64_OS    4
#define WIN64_OS        5
#define LINUX32_OS      6
#define LINUX64_OS      7
#ifndef COMPILE_OS
#define COMPILE_OS SUN32_OS
#if TARGET_MACHINE == SMEE_PPC && COMPILE_OS != VXWORKS32_OS
#error "TARGET_MACHINE(SMEE_PPC) must match COMPILE_OS(VXWORKS32_OS)."
#elif TARGET_MACHINE == SMEE_PPC_64 && (COMPILE_OS != VXWORKS32_OS || COMPILE_OS != VXWORKS64_OS)
#error "TARGET_MACHINE(SMEE_PPC_64) must match COMPILE_OS(VXWORKS32_OS or VXWORKS64_OS)."
#elif TARGET_MACHINE == SMEE_SPARCB && COMPILE_OS != SUN32_OS
#error "TARGET_MACHINE(SMEE_SPARCB) must match COMPILE_OS(SUN32_OS)."
#elif TARGET_MACHINE == SMEE_SPARCB_64 && (COMPILE_OS != SUN32_OS || COMPILE_OS != SUN64_OS)
#error "The TARGET_MACHINE(SMEE_SPARCB_64) must match COMPILE_OS(SUN32_OS or SUN64_OS)."
#define  SUN_OS         0
#define  VXWORKS_OS     1
#define  WIN_OS         2
#define  LINUX_OS       3
#if COMPILE_OS == SUN32_OS || COMPILE_OS == SUN64_OS
#define TARGET_OS SUN_OS
#elif COMPILE_OS == VXWORKS32_OS || COMPILE_OS == VXWORKS64_OS
#define TARGET_OS VXWORKS_OS
#elif COMPILE_OS == WIN32_OS || COMPILE_OS == WIN64_OS
#define TARGET_OS WIN_OS
#elif COMPILE_OS == LINUX32_OS || COMPILE_OS == LINUX64_OS
#define TARGET_OS LINUX_OS
#if TARGET_MACHINE == SMEE_SPARCB_32 || TARGET_MACHINE == SMEE_PPC_32 || TARGET_MACHINE == SMEE_SPARCB_64 || TARGET_MACHINE == SMEE_PPC_64
#define SMEE_BIG_ENDIAN
#elif TARGET_MACHINE == SMEE_X86_32 ||  TARGET_MACHINE == SMEE_X86_64
#define SMEE_LITTLE_ENDIAN
#define MASTER_MACHINE  1
#define SLAVE_MACHINE   0
#ifndef HOST_MACHINE
头文件名称为：smee_type.h
#ifndef SMEE_TYPE_H_
#define SMEE_TYPE_H_
#define SMEE_LONG_MIN   (-2147483647L-1L)
#define SMEE_LLONG_MIN  (-9223372036854775807LL-1LL)
#define SMEE_LLONG_MAX  9223372036854775807LL
#define SMEE_ULLONG_MAX 18446744073709551615ULL
#define SMEE_INT8_MAX (127)
#define SMEE_INT16_MAX (32767)
#define SMEE_INT32_MAX (2147483647)
#define SMEE_INT64_MAX (9223372036854775807LL)
#define SMEE_INT8_MIN (-128)
#define SMEE_INT16_MIN (-32767-1)
#define SMEE_INT32_MIN (-2147483647-1)
#define SMEE_INT64_MIN (-9223372036854775807LL-1)
#define SMEE_UINT8_MAX (255U)
#define SMEE_UINT16_MAX (65535U)
#define SMEE_UINT32_MAX (4294967295U)
#define SMEE_UINT64_MAX (18446744073709551615ULL)
#define  SMEE_SIZEOF_CHAR               1
#define  SMEE_SIZEOF_SHORT              2
#define  SMEE_SIZEOF_INT                4
#define  SMEE_SIZEOF_LLONG              8
#define  SMEE_SIZEOF_DOUBLE             8
#if TARGET_OS == SUN32_OS || TARGET_OS == VXWORKS32_OS
#define  SMEE_SIZEOF_LONG               4
#define  SMEE_SIZEOF_VOID_P             4
#elif TARGET_OS == SUN64_OS || TARGET_OS == VXWORKS64_OS
#define  SMEE_SIZEOF_LONG               8
#define  SMEE_SIZEOF_VOID_P             8
#if TARGET_MACHINE == SMEE_SPARCB_32 || TARGET_MACHINE == SMEE_SPARCB_64
#define  SMEE_SIZEOF_LONG_DOUBLE        16
#elif TARGET_MACHINE == SMEE_X86_32 || TARGET_MACHINE == SMEE_X86_64
#define  SMEE_SIZEOF_LONG_DOUBLE        12
typedef char                        SMEE_CHAR
typedef char                        SMEE_INT8
typedef unsigned char               SMEE_UINT8
typedef short                       SMEE_INT16
typedef unsigned short              SMEE_UINT16
typedef int                         SMEE_INT32
typedef unsigned int                SMEE_UINT32
typedef long long                   SMEE_INT64
typedef unsigned long long          SMEE_UINT64
typedef float                       SMEE_FLOAT
typedef double                      SMEE_DOUBLE
typedef long double                 SMEE_LDOUBLE
typedef unsigned long               SMEE_ULONG32
typedef char*                       SMEE_STRING
typedef long                        SMEE_LONG
typedef void                        *SMEE_LPVOID
typedef SMEE_UINT8                  SMEE_BYTE
typedef SMEE_UINT32                 SMEE_SIZE
typedef SMEE_INT32                  SMEE_KEY
typedef SMEE_INT32                  SMEE_GID
typedef SMEE_INT32                  SMEE_MODE
typedef SMEE_LONG                   SMEE_OFF
typedef SMEE_LONG                   SMEE_TIME_T
typedef SMEE_INT32 SMEE_BOOL
#define SMEE_TRUE 1
#define SMEE_FALSE 0
#if TARGET_OS==WIN_OS
typedef SMEE_ULONG32    SMEE_TIMER_ID
typedef SMEE_LPVOID     SMEE_HANDLE
typedef SMEE_HANDLE     SMEE_TID
typedef SMEE_HANDLE     SMEE_FD
typedef SMEE_UINT32     SMEE_SOCKET
typedef SMEE_HANDLE     SMEE_PID
typedef SMEE_HANDLE     SMEE_SEM_ID
typedef SMEE_INT32      SMEE_DWORD
#elif   TARGET_OS==SUN_OS || TARGET_OS == LINUX_OS
typedef SMEE_INT32      SMEE_TIMER_ID
typedef SMEE_UINT32     SMEE_TID
typedef SMEE_INT32      SMEE_HANDLE
typedef SMEE_INT32      SMEE_FD
typedef SMEE_INT32      SMEE_SOCKET
typedef SMEE_INT32      SMEE_PID
typedef SMEE_INT32      SMEE_SEM_ID
typedef SMEE_INT32      SMEE_DWORD
#elif   TARGET_OS==VXWORKS_OS
typedef SMEE_LPVOID     SMEE_TIMER_ID
typedef SMEE_UINT32     SMEE_TID
typedef SMEE_INT32      SMEE_HANDLE
typedef SMEE_INT32      SMEE_FD
typedef SMEE_INT32      SMEE_SOCKET
typedef SMEE_INT32      SMEE_PID
typedef SMEE_LPVOID     SMEE_SEM_ID
typedef SMEE_INT32      SMEE_DWORD
#if TARGET_OS==WIN_OS
#define SMEE_INVALID_PID        NULL
#define SMEE_INVALID_SEM_ID     (SMEE_SEM_ID)0
#define SMEE_INVALID_SHM_ID     NULL
#define SMEE_INVALLD_TID        NULL
#define SMEE_INVALID_SOCKET     SMEE_UINT32(~0)
#define SMEE_INVALID_TIMER_ID   (SMEE_INT32)(-1)
#define SMEE_INVALID_FD         NULL
#define SMEE_INVALID_HANDLE_VALUE (SMEE_INT32)(-1)
#elif TARGET_OS==SUN_OS || TARGET_OS == LINUX_OS
#define SMEE_INVALID_PID        (SMEE_INT32)(-1)
#define SMEE_INVALID_SEM_ID     (SMEE_INT32)(-1)
#define SMEE_INVALID_SHM_ID     (SMEE_INT32)(-1)
#define SMEE_INVALLD_TID        SMEE_UINT32(~0)
#define SMEE_INVALID_SOCKET     (SMEE_INT32)(-1)
#define SMEE_INVALID_TIMER_ID   (SMEE_INT32)(-1)
#define SMEE_INVALID_FD         (SMEE_INT32)(-1)
#define SMEE_INVALID_HANDLE_VALUE (SMEE_INT32)(-1)
#elif TARGET_OS==VXWORKS_OS
#define SMEE_INVALID_PID        (SMEE_INT32)(-1)
#define SMEE_INVALID_SEM_ID     (SMEE_SEM_ID)0
#define SMEE_INVALID_SHM_ID     (SMEE_INT32)(-1)
#define SMEE_INVALLD_TID        SMEE_UINT32(~0)
#define SMEE_INVALID_SOCKET     (SMEE_INT32)(-1)
#define SMEE_INVALID_TIMER_ID   NULL
#define SMEE_INVALID_FD         (SMEE_INT32)(-1)
#define SMEE_INVALID_HANDLE_VALUE (SMEE_INT32)(-1)
#define SMEE_SOCKET_ERROR ((SMEE_INT32)-1)
#define SMEE_WAIT_FOREVER ((SMEE_INT32)-1)
#define SMEE_MAX_FILE_NAME_SIZE    0x80
typedef struct
{
SMEE_DOUBLE x
SMEE_DOUBLE y
} xy_vect
typedef struct
{
SMEE_DOUBLE x
SMEE_DOUBLE z
} xz_vect
typedef struct
{
SMEE_DOUBLE y
SMEE_DOUBLE z
} yz_vect
typedef struct
{
SMEE_DOUBLE x
SMEE_DOUBLE y
SMEE_DOUBLE z
} xyz_vect
typedef struct
{
SMEE_DOUBLE z
SMEE_DOUBLE rx
SMEE_DOUBLE ry
} zrxry_vect
typedef struct
{
SMEE_DOUBLE rx
SMEE_DOUBLE ry
} rxry_vect
typedef struct
{
SMEE_DOUBLE x
SMEE_DOUBLE y
SMEE_DOUBLE rz
} xyrz_vect
typedef struct
{
SMEE_DOUBLE x
SMEE_DOUBLE y
SMEE_DOUBLE rz
SMEE_DOUBLE z
SMEE_DOUBLE rx
SMEE_DOUBLE ry
} xyrzzrxry_vect
头文件名称为：smee_unit.h
#ifndef SMEE_UNIT_H_
#define SMEE_UNIT_H_
#define SMEE_PI 3.1415926535897932385
#define SMEE_SI_TO_PM(v)  ( ((SMEE_LDOUBLE)(v)) * 1.0e12 )
#define SMEE_PM_TO_SI(v)  ( ((SMEE_LDOUBLE)(v)) * 1.0e-12 )
#define SMEE_SI_TO_NM(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e9 )
#define SMEE_NM_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-9 )
#define SMEE_SI_TO_UM(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_UM_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_SI_TO_MM(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e3 )
#define SMEE_MM_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-3 )
#define SMEE_SI_TO_NM_PER_MS(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_NM_PER_MS_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_SI_TO_KHZ(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-3 )
#define SMEE_KHZ_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e3 )
#define SMEE_SI_TO_MHZ(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_MHZ_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_SI_TO_MRAD(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e3 )
#define SMEE_MRAD_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-3 )
#define SMEE_SI_TO_URAD(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_URAD_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_SI_TO_NRAD(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e9 )
#define SMEE_NRAD_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-9 )
#define SMEE_SI_TO_DEGREE(v)  ( ((SMEE_DOUBLE)(v)) * 180.0 / SMEE_PI )
#define SMEE_DEGREE_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * SMEE_PI / 180.0 )
#define SMEE_SI_TO_UJ(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_UJ_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_SI_TO_MJCM(v)  ( ((SMEE_DOUBLE)(v)) * 0.1 )
#define SMEE_MJCM_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 10.0 )
#define SMEE_SI_TO_MWCM(v)  ( ((SMEE_DOUBLE)(v)) * 0.1 )
#define SMEE_MWCM_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 10.0 )
#define SMEE_SI_TO_CELSIUS(v)  ( ((SMEE_DOUBLE)(v)) - 273.15 )
#define SMEE_CELSIUS_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) + 273.15 )
#define SMEE_SI_TO_MS(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e3 )
#define SMEE_MS_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-3 )
#define SMEE_SI_TO_US(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_US_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_SI_TO_MINUTE(v)  ( ((SMEE_DOUBLE)(v)) / 60.0 )
#define SMEE_MINUTE_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 60.0 )
#define SMEE_SI_TO_HOUR(v)  ( ((SMEE_DOUBLE)(v)) / 3600.0 )
#define SMEE_HOUR_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 3600.0 )
#define SMEE_SI_TO_DAY(v)  ( ((SMEE_DOUBLE)(v)) / 86400.0 )
#define SMEE_DAY_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 86400.0 )
#define SMEE_SI_TO_BAR(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-5 )
#define SMEE_BAR_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e5 )
#define SMEE_SI_TO_PSI(v)  ( ((SMEE_DOUBLE)(v)) * 145.0 * 1.0e-6 )
#define SMEE_PSI_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 / 145.0 )
#define SMEE_SI_TO_PPM(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e6 )
#define SMEE_PPM_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-6 )
#define SMEE_SI_TO_PCT(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e2 )
#define SMEE_PCT_TO_SI(v)  ( ((SMEE_DOUBLE)(v)) * 1.0e-2 )
#define SMEE_SI_TO_LPM(v)   ( ((SMEE_DOUBLE)(v)) * 1.0e3 * 60.0)
#define SMEE_LPM_TO_SI(v)   ( ((SMEE_DOUBLE)(v)) * 1.0e-3 / 60.0)
头文件名称为：smee_project.h
#ifndef SMEE_PROJECT_H_
#define SMEE_PROJECT_H_
#define MAX_LOT_ID          88  
#define MIN_LOT_ID_LENGTH    1  
#define MAX_LOT_ID_LENGTH   80  
#define MAX_WAF_NR_PER_LOT  25  
#define MAX_RET_NR_PER_LOT  6   
#define MAX_IMG_NR_PER_LOT    24  
#define MAX_FLD_NR_PER_IMG  1000  
#define MAX_IMAGE_ID          88  
#define MIN_IMG_ID_LENGTH      4  
#define MAX_IMG_ID_LENGTH     12  
#define MIN_RET_PORT_NBR        1  
#define MAX_RET_PORT_NBR        2  
#define MAX_RET_BOX_SLOT_NBR    6  
#define MAX_RETICLE_ID         88  
#define MIN_RET_ID_LENGTH       1  
#define MAX_RET_ID_LENGTH      64  
#define MAX_RET_POD_ID         88  
#define MIN_RET_POD_ID_LENGTH   1  
#define MAX_RET_POD_ID_LENGTH  64  
#define MIN_WAF_PORT_NBR           1   
#define MAX_WAF_PORT_NBR           3   
#define MAX_WAF_CAR_SLOT_NBR       25  
#define MAX_WAF_CARRIER_ID         88  
#define MIN_WAF_CARRIER_ID_LENGTH   1  
#define MAX_WAF_CARRIER_ID_LENGTH  80  
#define MAX_WAFER_ID       88  
#define MIN_WAF_ID_LENGTH   1  
#define MAX_WAF_ID_LENGTH  80  
#define MAX_RING_ID         64  
#define MIN_RING_ID_LENGTH   8  
#define MAX_RING_ID_LENGTH  24  
#define MAX_WAFER_MARK_NUM 100  
#ifndef DEFAULT_TIMEOUT
#define DEFAULT_TIMEOUT		0x7FFFFFFF  
typedef enum
{
SMEE_SUBSTRATE_SIZE_MIN = 0
SMEE_WAFER_2_INCH
SMEE_WAFER_3_INCH
SMEE_WAFER_4_INCH
SMEE_WAFER_5_INCH
SMEE_WAFER_6_INCH
SMEE_WAFER_8_INCH
SMEE_WAFER_12_INCH
SMEE_WAFER_18_INCH
SMEE_SUBSTRATE_SIZE_MAX
}SMEE_SUBSTRATE_SIZE_ENUM
typedef enum
{
SMEE_WAFER_TYPE_MIN = 0
SMEE_WAFER_NOTCH
SMEE_WAFER_FLAT
SMEE_WAFER_DOUBLE_FLAT
SMEE_WAFER_NONE
SMEE_WAFER_TYPE_MAX
}SMEE_WAFER_TYPE_ENUM
typedef enum
{
SMEE_ALIGN_TYPE_MIN = 0
SMEE_ALIGN_NONE
SMEE_ALIGN_TTL
SMEE_ALIGN_OA
SMEE_ALIGN_WBA
SMEE_ALIGN_DT
SMEE_ALIGN_TYPE_MAX
}SMEE_ALIGN_TYPE_ENUM
typedef enum
{
SMEE_ALGORITHM_TYPE_MIN            = -1
SMEE_ALGORITHM_GRAY_CORR           = 0
SMEE_ALGORITHM_EDGE_MAX_I          = 1
SMEE_ALGORITHM_EDGE_MAX_II         = 2
SMEE_ALGORITHM_EDGE_MAX_ENHANCED   = 3
SMEE_ALGORITHM_EDGE_CORR           = 4
SMEE_ALGORITHM_TEXTURE_CORR        = 5
SMEE_ALGORITHM_LASER_MARK_LOCATION = 6
SMEE_ALGORITHM_REGION_GRAY_CORR    = 7
SMEE_ALGORITHM_GRAY_CORR_II        = 8
SMEE_ALGORITHM_TYPE_MAX            = 100
}SMEE_ALGORITHM_TYPE_ENUM
typedef enum
{
SMEE_SURFACE_TYPE_MIN = 0
SMEE_SURFACE_POLISH_ONE_SIDE
SMEE_SURFACE_POLISH_BOTH_SIDE
SMEE_SURFACE_WAFER
SMEE_SURFACE_CUSTOMIZE_1
SMEE_SURFACE_CUSTOMIZE_2
SMEE_SURFACE_TYPE_MAX
} SMEE_SURFACE_TYPE_ENUM
头文件名称为：SM4A_tc.h
#ifndef _SM4A_TC_H
#define _SM4A_TC_H
#define SM4A_CONST_BASE					0x534D0000
#define SM4A_DRIVER_END					"End_drv"
#define SM4A_ALL_DRIVERS				"All_drv"
typedef enum
{
SM4A_BOOT_MIN = -1
SM4A_NOT_BOOTED
SM4A_BUSY_BOOTING
SM4A_BOOTED
SM4A_BOOT_MAX
} SM4A_BOOT_STATUS_ENUM
typedef enum
{
SM4A_JOB_START_MIN = -1
SM4A_JOB_STARTED
SM4A_JOB_NOT_STARTED
SM4A_JOB_START_MAX
} SM4A_JOB_STATUS_ENUM
typedef enum
{
SM4A_TASK_START_MIN = -1
SM4A_TASK_STARTED
SM4A_TASK_NOT_STARTED
SM4A_TASK_START_MAX
} SM4A_TASK_STATUS_ENUM
typedef enum
{
SM4A_IMPORTANCE_MIN = -1
SM4A_EXPLICIT
SM4A_IF_NECESSARY
SM4A_IMPORTANCE_MAX
} SM4A_IMPORTANCE_ENUM
typedef enum
{
SM4A_DRIVER_STATUS_MIN = -1
SM4A_START_INITIALIZATION
SM4A_READY_INITIALIZATION
SM4A_START_RETRY_INITIALIZATION
SM4A_READY_RETRY_INITIALIZATION
SM4A_FAILED_INITIALIZATION
SM4A_WAITING_INITIALIZATION
SM4A_START_TERMINATION
SM4A_READY_TERMINATION
SM4A_START_RETRY_TERMINATION
SM4A_READY_RETRY_TERMINATION
SM4A_FAILED_TERMINATION
SM4A_DRIVER_STATUS_MAX
} SM4A_DRIVER_STATUS_ENUM
typedef enum
{
SM4A_DRIVER_STATE_MIN = -1
SM4A_IDLE
SM4A_TERMINATED
SM4A_BUSY
SM4A_DRIVER_STATE_MAX
} SM4A_DRIVER_STATE_ENUM
typedef enum
{
SM4A_DRIVER_INFO_MIN = -1
SM4A_DRIVER_ENABLED
SM4A_DRIVER_DISABLED
SM4A_DRIVER_INFO_MAX
} SM4A_DRIVER_INFO_ENUM
typedef struct
{
int				node_id
SMEE_BOOL		host_present
ADAE_TIME_VALUE  timestamp
} SM4A_NODE_TIMESTAMP_STRUCT
typedef struct
{
SM4A_BOOT_STATUS_ENUM   boot_status
SMEE_BOOL               host_present
} SM4A_HOST_STATUS_STRUCT
typedef char SM4A_DRIVER_NAME[SM4A_DRIVER_NAME_LENGTH+1]
typedef struct
{
SM4A_DRIVER_NAME		driver_names
SM4A_DRIVER_STATUS_ENUM	driver_status
int ifiller
} SM4A_WAIT_STATUS_STRUCT
typedef struct
{
SM4A_DRIVER_NAME		driver_names
SM4A_DRIVER_STATE_ENUM	driver_status
int error_code
} SM4A_GET_STATUS_STRUCT
typedef struct
{
SMEE_BOOL	host_present
int			host_id
char		host_name[SM_HOST_NAME_LEN+1]
char		host_ip[SM_HOST_NAME_LEN+1]
} SM4A_HOST_INFO_STRUCT
头文件名称为：TR4A_tc.h
#ifndef		__TR4A_TC_H__
#define		__TR4A_TC_H__
typedef enum
{
TR4A_SIM_MODE_MIN = -1
TR4A_SIM_DISABLED
TR4A_SIM_MODE_1
TR4A_SIM_MODE_2
TR4A_SIM_MODE_3
TR4A_SIM_MODE_4
TR4A_SIM_MODE_MAX
} TR4A_SIM_MODE_ENUM
typedef enum
{
TR4A_TRACE_MODE_MIN = -1
TR4A_TRACE_DISABLED
TR4A_TRACE_INT
TR4A_TRACE_EXT
TR4A_TRACE_INT_EXT
TR4A_TRACE_REAL_TIME
TR4A_INT_REAL
TR4A_EXT_REAL
TR4A_TRACE_INT_EXT_REAL
TR4A_TRACE_MODE_MAX
} TR4A_TRACE_MODE_ENUM
typedef enum
{
TR4A_REQ_MODE_MIN = -1
TR4A_REQ_DISABLED
TR4A_REQ_INT_INPUT
TR4A_REQ_INT_OUTPUT
TR4A_REQ_INT_INOUT
TR4A_REQ_EXT_INPUT
TR4A_REQ_EXT_OUTPUT
TR4A_REQ_EXT_INOUT
TR4A_REQ_INT_EXT_INPUT
TR4A_REQ_INT_EXT_OUTPUT
TR4A_REQ_INT_EXT_INOUT
TR4A_REQ_MODE_MAX
} TR4A_REQ_MODE_ENUM
头文件名称为：EC4T_tc.h
#ifndef EC4T_TC_H
#define EC4T_TC_H
#define EC4T_MAX_NR_SUBSTRATE_MARKS     50
#define EC4A_MAPPING_SCAN_NUM               40
typedef enum
{
EC4T_MARK_LOCATION_MIN = 0
EC4T_MARK_LOCATION_WS_FIDUCIAL
EC4T_MARK_LOCATION_SUBSTRATE
EC4T_MARK_LOCATION_MAX
} EC4T_MARK_LOCATION_ENUM
typedef struct
{
xy_vect      RM1_pos
xy_vect      RM2_pos
SMEE_DOUBLE matching_rate
SMEE_CHAR template_file[EC4A_MAX_FILE_NAME_SIZE]
}EC4T_RETI_ALIGN_SPC_STRUCT
typedef struct
{
SMEE_BOOL do_auto_focus
SMEE_BOOL perform_vert_compensation
SMEE_DOUBLE vert_compensation
SMEE_DOUBLE matching_rate
SMEE_CHAR template_file[EC4A_MAX_FILE_NAME_SIZE]
} EC4T_WA_ALIGN_RECIPE_STRUCT
typedef struct
{
xy_vect aim_pos
SMEE_DOUBLE matching_rate
} EC4T_UPDATE_WA_BASELINE_RESULT_STRUCT
typedef struct
{
SMEE_DOUBLE matching_rate_in_ccd
xy_vect mark_pos_in_ccd
} EC4T_UPDATE_TTL_BASELINE_RESULT_STRUCT
typedef struct
{
xy_vect mark_pos_in_ccd
xy_vect mark_pos_in_wzcs
SMEE_DOUBLE match_rate
xyrz_vect align_pos
xyrz_vect ws_meas_pos
xy_vect mark_offset_in_wscs
} EC4T_WA_ALIGN_RESULT_STRUCT
typedef struct
{
SMEE_BOOL search_enabled
SMEE_INT32 filler1
SMEE_DOUBLE matching_rate
SMEE_CHAR template_file[EC4A_MAX_FILE_NAME_SIZE]
} EC4T_ALIGN_RECIPE_STRUCT
typedef struct
{
xy_vect mark_pos_in_ccd
xy_vect mark_pos_in_wzcs
SMEE_DOUBLE match_rate
xyrz_vect align_pos
xyrz_vect rs_meas_pos
xyrz_vect ws_meas_pos
xy_vect mark_offset_in_rzcs
xy_vect mark_offset_in_wscs
} EC4T_TTL_ALIGN_RESULT_STRUCT
typedef struct
{
xy_vect sStartPos
xy_vect sEndPos
SMEE_UINT32 uiSpotValid
SMEE_INT32 ifiller
}EC4T_SCAN_PARAM_STRUCT
typedef struct
{
SMEE_INT32 iScanNum
EC4T_SCAN_PARAM_STRUCT sScanRoute[EC4A_MAPPING_SCAN_NUM]
}EC4T_MAPPING_ROUTE_STRUCT
